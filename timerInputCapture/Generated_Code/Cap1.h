/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : Cap1.h
**     Project     : ProcessorExpert
**     Processor   : MK60FN1M0VLQ15
**     Component   : Capture_LDD
**     Version     : Component 01.010, Driver 01.01, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2021-10-08, 16:38, # CodeGen: 9
**     Abstract    :
**          This component "Capture_LDD" simply implements the capture function
**          of timer. The counter counts the same way as in free run mode. On
**          the selected edge of the input signal (on the input pin), the current
**          content of the counter register is written into the capture
**          register and the OnCapture event is called.
**          This Capture component provides a high level API for unified
**          hardware access to various timer devices using the TimerUnit
**          component.
**     Settings    :
**          Component name                                 : Cap1
**          Capture device                                 : FTM3_C0V
**          Counter                                        : FTM3_CNT
**          Counter direction                              : Up
**          Counter width                                  : 16 bits
**          Value type                                     : Optimal
**          Interrupt service/event                        : Disabled
**          Event                                          : 
**            Input pin                                    : PTE5/SPI1_PCS2/UART3_RX/SDHC0_D2/FTM3_CH0
**            Input pin signal                             : 
**            Edge                                         : both edges
**            Maximum time of event                        : 1 sec
**          Initialization                                 : 
**            Enabled in init. code                        : yes
**            Auto initialization                          : yes
**            Event mask                                   : 
**              OnCapture                                  : Disabled
**              OnOverrun                                  : Disabled
**          CPU clock/configuration selection              : 
**            Clock configuration 0                        : This component enabled
**            Clock configuration 1                        : This component disabled
**            Clock configuration 2                        : This component disabled
**            Clock configuration 3                        : This component disabled
**            Clock configuration 4                        : This component disabled
**            Clock configuration 5                        : This component disabled
**            Clock configuration 6                        : This component disabled
**            Clock configuration 7                        : This component disabled
**          Referenced components                          : 
**            Linked TimerUnit                             : TU1
**     Contents    :
**         Init            - LDD_TDeviceData* Cap1_Init(LDD_TUserData *UserDataPtr);
**         Reset           - LDD_TError Cap1_Reset(LDD_TDeviceData *DeviceDataPtr);
**         GetCaptureValue - LDD_TError Cap1_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2013 Freescale Semiconductor, Inc. All Rights Reserved.
**     SOURCE DISTRIBUTION PERMISSIBLE as directed in End User License Agreement.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/
/*!
** @file Cap1.h
** @version 01.01
** @brief
**          This component "Capture_LDD" simply implements the capture function
**          of timer. The counter counts the same way as in free run mode. On
**          the selected edge of the input signal (on the input pin), the current
**          content of the counter register is written into the capture
**          register and the OnCapture event is called.
**          This Capture component provides a high level API for unified
**          hardware access to various timer devices using the TimerUnit
**          component.
*/         
/*!
**  @addtogroup Cap1_module Cap1 module documentation
**  @{
*/         

#ifndef __Cap1_H
#define __Cap1_H

/* MODULE Cap1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "TU1.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 


#ifndef __BWUserType_Cap1_TValueType
#define __BWUserType_Cap1_TValueType
  typedef uint32_t Cap1_TValueType ;   /* Type for data parameters of methods */
#endif

#define Cap1_CNT_INP_FREQ_U TU1_CNT_INP_FREQ_U_0 /* Counter input frequency in Hz */
#define Cap1_CNT_INP_FREQ_R TU1_CNT_INP_FREQ_R_0 /* Counter input frequency in Hz */
#define Cap1_COUNTER_WIDTH 0x10U       /* Counter width in bits  */
#define Cap1_COUNTER_DIR   DIR_UP      /* Direction of counting */
/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define Cap1_PRPH_BASE_ADDRESS  0x400B9000U
  
/*! Device data structure pointer used when auto initialization property is enabled. This constant can be passed as a first parameter to all component's methods. */
#define Cap1_DeviceData  ((LDD_TDeviceData *)PE_LDD_GetDeviceStructure(PE_LDD_COMPONENT_Cap1_ID))

/* Methods configuration constants - generated for all enabled component's methods */
#define Cap1_Init_METHOD_ENABLED       /*!< Init method of the component Cap1 is enabled (generated) */
#define Cap1_Reset_METHOD_ENABLED      /*!< Reset method of the component Cap1 is enabled (generated) */
#define Cap1_GetCaptureValue_METHOD_ENABLED /*!< GetCaptureValue method of the component Cap1 is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */



/*
** ===================================================================
**     Method      :  Cap1_Init (component Capture_LDD)
*/
/*!
**     @brief
**         Initializes the device. Allocates memory for the device data
**         structure, allocates interrupt vectors and sets interrupt
**         priority, sets pin routing, sets timing, etc. If the
**         property ["Enable in init. code"] is set to "yes" value then
**         the device is also enabled (see the description of the
**         [Enable] method). In this case the [Enable] method is not
**         necessary and needn't to be generated. This method can be
**         called only once. Before the second call of Init the [Deinit]
**         must be called first.
**     @param
**         UserDataPtr     - Pointer to the user or
**                           RTOS specific data. This pointer will be
**                           passed as an event or callback parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* Cap1_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  Cap1_Reset (component Capture_LDD)
*/
/*!
**     @brief
**         This method resets the counter register (see implementation
**         note in [General Info]).
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError Cap1_Reset(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  Cap1_GetCaptureValue (component Capture_LDD)
*/
/*!
**     @brief
**         This method gets the last value captured by enabled timer
**         (see implementation note in [General Info]). The method does
**         not return valid value after initialization or after [Reset]
**         until new capture event (even if the returned Error code is
**         ERR_OK).
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         ValuePtr        - A pointer to the content of the
**                           capture register
**     @return
**                         - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active clock configuration
*/
/* ===================================================================*/
LDD_TError Cap1_GetCaptureValue(LDD_TDeviceData *DeviceDataPtr, Cap1_TValueType *ValuePtr);

/* END Cap1. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif 
/* ifndef __Cap1_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.08]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
